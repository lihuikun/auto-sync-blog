import{_ as a,c as r,a as t,o}from"./chunks/framework.DBW9o7tl.js";const d=JSON.parse('{"title":"面试题汇总","description":"","frontmatter":{},"headers":[],"relativePath":"columns/7345105927358742582.md","filePath":"columns/7345105927358742582.md"}'),l={name:"columns/7345105927358742582.md"};function n(p,e,s,c,i,h){return o(),r("div",null,e[0]||(e[0]=[t('<h1 id="面试题汇总" tabindex="-1">面试题汇总 <a class="header-anchor" href="#面试题汇总" aria-label="Permalink to &quot;面试题汇总&quot;">​</a></h1><h2 id="内容介绍" tabindex="-1">内容介绍 <a class="header-anchor" href="#内容介绍" aria-label="Permalink to &quot;内容介绍&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>开始面试的奇葩题记录</p></div><h2 id="数据统计" tabindex="-1">数据统计 <a class="header-anchor" href="#数据统计" aria-label="Permalink to &quot;数据统计&quot;">​</a></h2><p><strong>7 文章 · 0 订阅</strong></p><h2 id="文章列表" tabindex="-1">文章列表 <a class="header-anchor" href="#文章列表" aria-label="Permalink to &quot;文章列表&quot;">​</a></h2><h3 id="前端常见手写题" tabindex="-1">前端常见手写题 <a class="header-anchor" href="#前端常见手写题" aria-label="Permalink to &quot;前端常见手写题&quot;">​</a></h3><blockquote><p>1.Promise 2.new 3.call，参数是以逗号分开的 4.apply,参数是一个数组 5.bind类似call，但返回的是函数 三种的区别 6.递归拷贝...</p><p><a href="https://juejin.cn/post/7345774436703141951" target="_blank" rel="noreferrer">前往掘金</a></p></blockquote><p>📊 <strong>19 阅读 · 0 点赞 · 0 评论 · 0 收藏</strong></p><p>📅 2024-03-14 🏷 <code>前端</code></p><h3 id="js的高阶函数以及应用场景" tabindex="-1">js的高阶函数以及应用场景 <a class="header-anchor" href="#js的高阶函数以及应用场景" aria-label="Permalink to &quot;js的高阶函数以及应用场景&quot;">​</a></h3><blockquote><p>JavaScript 中的高阶函数是指接收函数作为参数，或者将函数作为返回值的函数。 这些函数提供了强大的抽象能力，使得代码更加灵活和表达力强。下面列举了一些常见的高阶函数及其应用场景： 数组操作: ...</p><p><a href="https://juejin.cn/post/7345105927359365174" target="_blank" rel="noreferrer">前往掘金</a></p></blockquote><p>📊 <strong>17 阅读 · 0 点赞 · 0 评论 · 0 收藏</strong></p><p>📅 2024-03-12 🏷 <code>前端</code></p><h3 id="js中的export-和export-default-有啥区别" tabindex="-1">js中的export 和export default，有啥区别 <a class="header-anchor" href="#js中的export-和export-default-有啥区别" aria-label="Permalink to &quot;js中的export 和export default，有啥区别&quot;">​</a></h3><blockquote><p>在 JavaScript 中，export 和 export default 是 ES6 模块系统中用于导出模块的两种不同语法。 export: 使用 export 可以导出多个值，它们可以是变量、函...</p><p><a href="https://juejin.cn/post/7345105895930494987" target="_blank" rel="noreferrer">前往掘金</a></p></blockquote><p>📊 <strong>31 阅读 · 0 点赞 · 0 评论 · 0 收藏</strong></p><p>📅 2024-03-12 🏷 <code>前端</code></p><h3 id="给定一个url和key-查找key是否在url的查询字符串中-如果在就返回-不在就返回null-存在多个就返回数组" tabindex="-1">给定一个url和key，查找key是否在url的查询字符串中，如果在就返回，不在就返回null，存在多个就返回数组 <a class="header-anchor" href="#给定一个url和key-查找key是否在url的查询字符串中-如果在就返回-不在就返回null-存在多个就返回数组" aria-label="Permalink to &quot;给定一个url和key，查找key是否在url的查询字符串中，如果在就返回，不在就返回null，存在多个就返回数组&quot;">​</a></h3><blockquote><p>这个任务可以通过解析 URL 的查询字符串来完成。在 JavaScript 中，可以使用 URL 和 URLSearchParams 对象来解析查询字符串并搜索特定的键。以下是一个函数示例，它接受一个...</p><p><a href="https://juejin.cn/post/7345105816242749479" target="_blank" rel="noreferrer">前往掘金</a></p></blockquote><p>📊 <strong>21 阅读 · 1 点赞 · 0 评论 · 0 收藏</strong></p><p>📅 2024-03-12 🏷 <code>前端</code></p><h3 id="有这样一个需求-后端返回大量数据-如何保证用户滚动的性能-切换横屏如何保证resize的性能" tabindex="-1">有这样一个需求，后端返回大量数据，如何保证用户滚动的性能，切换横屏如何保证resize的性能？ <a class="header-anchor" href="#有这样一个需求-后端返回大量数据-如何保证用户滚动的性能-切换横屏如何保证resize的性能" aria-label="Permalink to &quot;有这样一个需求，后端返回大量数据，如何保证用户滚动的性能，切换横屏如何保证resize的性能？&quot;">​</a></h3><blockquote><p>面对大量数据和动态屏幕尺寸调整时，维护良好的前端性能是一项挑战，但可以通过各种策略来实现。下面是针对上述需求的一些建议： 如何保证用户滚动的性能： 虚拟滚动（Virtual Scrolling）/窗口...</p><p><a href="https://juejin.cn/post/7345105895930396683" target="_blank" rel="noreferrer">前往掘金</a></p></blockquote><p>📊 <strong>38 阅读 · 0 点赞 · 0 评论 · 0 收藏</strong></p><p>📅 2024-03-12 🏷 <code>前端</code></p><h3 id="web项目版本管理-要求用户不主动刷新-完成web的更新" tabindex="-1">web项目版本管理，要求用户不主动刷新，完成web的更新 <a class="header-anchor" href="#web项目版本管理-要求用户不主动刷新-完成web的更新" aria-label="Permalink to &quot;web项目版本管理，要求用户不主动刷新，完成web的更新&quot;">​</a></h3><blockquote><ol><li>使用 Service Workers Service Workers 是一种运行在浏览器背后的脚本，它可以拦截和处理网络请求，包括文件的缓存。通过它，你可以控制文件的缓存，并在后台更新文件，而不...</li></ol><p><a href="https://juejin.cn/post/7345105895930347531" target="_blank" rel="noreferrer">前往掘金</a></p></blockquote><p>📊 <strong>46 阅读 · 0 点赞 · 0 评论 · 0 收藏</strong></p><p>📅 2024-03-12 🏷 <code>前端</code></p><h3 id="如何保证同时请求五个接口保证按照顺序输出结果" tabindex="-1">如何保证同时请求五个接口保证按照顺序输出结果 <a class="header-anchor" href="#如何保证同时请求五个接口保证按照顺序输出结果" aria-label="Permalink to &quot;如何保证同时请求五个接口保证按照顺序输出结果&quot;">​</a></h3><blockquote><p>1.使用 Async/Await 使用 async/await 可以使异步代码看起来更像同步代码，可以按顺序等待每个异步操作完成。（缺点无法同时发起请求） 2.使用 Promise.all 如果你不需...</p><p><a href="https://juejin.cn/post/7345105895930150923" target="_blank" rel="noreferrer">前往掘金</a></p></blockquote><p>📊 <strong>90 阅读 · 0 点赞 · 0 评论 · 0 收藏</strong></p><p>📅 2024-03-12 🏷 <code>前端</code></p>',34)]))}const b=a(l,[["render",n]]);export{d as __pageData,b as default};
